#来自colab
#pandas 是一种列存数据分析 API。它是用于处理和分析输入数据的强大工具，很多机器学习框架都支持将 pandas 数据结构作为输入。
基本概念：
以下行导入了 pandas API 并输出了相应的 API 版本：
from __future__ import print_function #暂时未知用处

import pandas as pd
pd.__version__
输出：
u'0.24.2'

pandas 中的主要数据结构被实现为以下两类：
    DataFrame，您可以将它想象成一个关系型数据表格，其中包含多个行和已命名的列。
    Series，它是单一列。DataFrame 中包含一个或多个 Series，每个 Series 均有一个名称。
    数据框架是用于数据操控的一种常用抽象实现形式。

创建 Series 的一种方法是构建 Series 对象。例如：
pd.Series(['San Francisco', 'San Jose', 'Sacramento'])
输出：
0    San Francisco
1         San Jose
2       Sacramento
dtype: object

您可以将映射 string 列名称的 dict 传递到它们各自的 Series，从而创建DataFrame对象。如果 Series 在长度上不一致，系统会用特殊的 NA/NaN 值填充缺失的值。例如：
city_names = pd.Series(['San Francisco', 'San Jose', 'Sacramento'])
population = pd.Series([852469, 1015785, 485199])

pd.DataFrame({ 'City name': city_names, 'Population': population })
输出：
	City name	    Population
0	San Francisco	    852469
1	San Jose	       1015785
2	Sacramento	      485199

但是在大多数情况下，您需要将整个文件加载到 DataFrame 中。
下面的示例加载了一个包含加利福尼亚州住房数据的文件。请运行以下单元格以加载数据，并创建特征定义：
california_housing_dataframe = pd.read_csv("https://download.mlcc.google.cn/mledu-datasets/california_housing_train.csv", sep=",")
california_housing_dataframe.describe()
输出：#实际上以下数据格式为尾部对齐，下面数据格式同此
	     longitude	    latitude	     housing_median_age	  total_rooms	  total_bedrooms	population	  households	  median_income	  median_house_value
count	 17000.000000	  17000.000000	 17000.000000	        17000.000000	17000.000000	  17000.000000	17000.000000	17000.000000	  17000.000000
mean	 -119.562108	  35.625225	     28.589353	          2643.664412	  539.410824	    1429.573941	  501.221941	  3.883578	      207300.912353
std    2.005166	      2.137340	     12.586937	          2179.947071	  421.499452	    1147.852959	  384.520841	  1.908157	      115983.764387
min	   -124.350000	  32.540000	     1.000000	            2.000000	    1.000000	      3.000000	    1.000000	    0.499900	      14999.000000
25%	   -121.790000	  33.930000	     18.000000	          1462.000000	  297.000000	    790.000000	  282.000000	  2.566375	      119400.000000
50%	   -118.490000	  34.250000	     29.000000	          2127.000000	  434.000000	    1167.000000	  409.000000	  3.544600	      180400.000000
75%	   -118.000000	  37.720000	     37.000000	          3151.250000	  648.250000	    1721.000000	  605.250000	  4.767000	      265000.000000
max	   -114.310000	  41.950000	     52.000000	          37937.000000	6445.000000	    35682.000000	6082.000000	  15.000100	      500001.000000

上面的示例使用 DataFrame.describe 来显示关于 DataFrame 的有趣统计信息。
另一个实用函数是 DataFrame.head，它显示 DataFrame 的前几个记录：
california_housing_dataframe.head()
输出：
	 longitude	latitude	housing_median_age	total_rooms	 total_bedrooms	population	households	median_income	 median_house_value
0	-114.31	    34.19	    15.0	              5612.0	     1283.0	        1015.0	    472.0	      1.4936	       66900.0
1	-114.47     34.40	    19.0	              7650.0	     1901.0	        1129.0	    463.0	      1.8200	       80100.0
2	-114.56	    33.69	    17.0	              720.0	       174.0	        333.0	      117.0	      1.6509	       85700.0
3	-114.57	    33.64	    14.0	              1501.0	     337.0	        515.0	      226.0	      3.1917	       73400.0
4	-114.57	    33.57	    20.0	              1454.0	     326.0	        624.0	      262.0	      1.9250	       65500.0

pandas 的另一个强大功能是绘制图表。
例如，借助 DataFrame.hist，您可以快速了解一个列中值的分布：
california_housing_dataframe.hist('housing_median_age')
输出：
array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f930408fc10>]],dtype=object)
#图表省略

访问数据：
使用熟悉的 Python dict/list 指令访问 DataFrame 数据：
cities = pd.DataFrame({ 'City name': city_names, 'Population': population })
print(type(cities['City name']))
cities['City name']
输出：
<class 'pandas.core.series.Series'>
0    San Francisco
1         San Jose
2       Sacramento
Name: City name, dtype: object

print(type(cities['City name'][1]))
cities['City name'][1]
输出：
<type 'str'>
'San Jose'

print(type(cities[0:2]))
cities[0:2]
输出：
<class 'pandas.core.frame.DataFrame'>
City name	       Population	   Area square miles	   Population density	    trueandtrue	   Is wide and has saint name
0	San Francisco	 852469	       46.87	               18187.945381	          False	         False
1	San Jose	     1015785	     176.53	               5754.177760	          True	         True

操控数据：
您可以向 Series 应用 Python 的基本运算指令。例如：
population / 1000.
输出：
0     852.469
1    1015.785
2     485.199
dtype: float64

NumPy 是一种用于进行科学计算的常用工具包。pandas Series 可用作大多数 NumPy 函数的参数：
import numpy as np
np.log(population)
输出：
0    13.655892
1    13.831172
2    13.092314
dtype: float64

对于更复杂的单列转换，您可以使用 Series.apply。像 Python 映射函数一样，
Series.apply 将以参数形式接受 lambda 函数，而该函数会应用于每个值。
下面的示例创建了一个指明 population 是否超过 100 万的新 Series：
population.apply(lambda val: val > 1000000)
输出：
0    False
1     True
2    False
dtype: bool

DataFrames 的修改方式也非常简单。例如，以下代码向现有 DataFrame 添加了两个 Series：
cities['Area square miles'] = pd.Series([46.87, 176.53, 97.92])
cities['Population density'] = cities['Population'] / cities['Area square miles']
cities
输出：
  City name	      Population	 Area square miles	 Population density
0	San Francisco	  852469	     46.87	             18187.945381
1	San Jose	      1015785	     176.53	             5754.177760
2	Sacramento	    485199	     97.92	             4955.055147

索引：
Series 和 DataFrame 对象也定义了 index 属性，该属性会向每个 Series 项或 DataFrame 行赋一个标识符值。

默认情况下，在构造时，pandas 会赋可反映源数据顺序的索引值。索引值在创建后是稳定的；也就是说，它们不会因为数据重新排序而发生改变。
city_names.index
输出：
RangeIndex(start=0, stop=3, step=1)

cities.index
输出：
RangeIndex(start=0, stop=3, step=1)

调用 DataFrame.reindex 以手动重新排列各行的顺序。例如，以下方式与按城市名称排序具有相同的效果：
cities.reindex([2, 0, 1])
输出：
  City name	     Population	    Area square miles	    Population density	  trueandtrue	     Is wide and has saint name
2	Sacramento	   485199	        97.92	                4955.055147	          False	           False
0	San Francisco	 852469	        46.87	                18187.945381	        False	           False
1	San Jose	     1015785	      176.53	              5754.177760	          True	           True

重建索引是一种随机排列 DataFrame 的绝佳方式。
在下面的示例中，我们会取用类似数组的索引，然后将其传递至 NumPy 的 random.permutation 函数，该函数会随机排列其值的位置。
如果使用此重新随机排列的数组调用 reindex，会导致 DataFrame 行以同样的方式随机排列。 尝试多次运行以下单元格！
cities.reindex(np.random.permutation(cities.index))
输出：省略


